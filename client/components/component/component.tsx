/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/1jV6zvbjK8u
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Libre_Franklin } from 'next/font/google'
import { Rubik } from 'next/font/google'

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

rubik({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState } from "react"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select"
import { Button } from "@/components/ui/button"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"
import { Separator } from "@/components/ui/separator"

export function Component() {
  const [step, setStep] = useState(1)
  const [deliveryAddress, setDeliveryAddress] = useState({
    name: "",
    address1: "",
    address2: "",
    city: "",
    state: "",
    zip: "",
    country: "",
  })
  const [paymentMethod, setPaymentMethod] = useState("")
  const [cart, setCart] = useState([
    {
      id: 1,
      name: "Acme Circles T-Shirt",
      price: 29.99,
      quantity: 1,
    },
    {
      id: 2,
      name: "Aqua Filters",
      price: 14.99,
      quantity: 2,
    },
  ])
  const handleDeliveryAddressChange = (field, value) => {
    setDeliveryAddress((prevAddress) => ({
      ...prevAddress,
      [field]: value,
    }))
  }
  const handlePaymentMethodChange = (method) => {
    setPaymentMethod(method)
  }
  const handleNextStep = () => {
    setStep((prevStep) => prevStep + 1)
  }
  const handlePreviousStep = () => {
    setStep((prevStep) => prevStep - 1)
  }
  const handlePlaceOrder = () => {
    console.log("Order placed:", {
      deliveryAddress,
      paymentMethod,
      cart,
    })
  }
  return (
    <div className="container mx-auto my-12 px-4 sm:px-6 lg:px-8">
      <div className="grid grid-cols-1 gap-8 sm:grid-cols-3">
        <div className="col-span-2 rounded-lg border bg-white p-6 shadow-md">
          <div className="mb-6">
            <h1 className="text-2xl font-bold">Checkout</h1>
            <p className="text-muted-foreground">Review your order and complete the purchase.</p>
          </div>
          {step === 1 && (
            <div>
              <h2 className="mb-4 text-xl font-bold">Delivery Address</h2>
              <form className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                <div>
                  <Label htmlFor="name">Name</Label>
                  <Input
                    id="name"
                    value={deliveryAddress.name}
                    onChange={(e) => handleDeliveryAddressChange("name", e.target.value)}
                  />
                </div>
                <div>
                  <Label htmlFor="address1">Address 1</Label>
                  <Input
                    id="address1"
                    value={deliveryAddress.address1}
                    onChange={(e) => handleDeliveryAddressChange("address1", e.target.value)}
                  />
                </div>
                <div>
                  <Label htmlFor="address2">Address 2</Label>
                  <Input
                    id="address2"
                    value={deliveryAddress.address2}
                    onChange={(e) => handleDeliveryAddressChange("address2", e.target.value)}
                  />
                </div>
                <div>
                  <Label htmlFor="city">City</Label>
                  <Input
                    id="city"
                    value={deliveryAddress.city}
                    onChange={(e) => handleDeliveryAddressChange("city", e.target.value)}
                  />
                </div>
                <div>
                  <Label htmlFor="state">State</Label>
                  <Input
                    id="state"
                    value={deliveryAddress.state}
                    onChange={(e) => handleDeliveryAddressChange("state", e.target.value)}
                  />
                </div>
                <div>
                  <Label htmlFor="zip">Zip</Label>
                  <Input
                    id="zip"
                    value={deliveryAddress.zip}
                    onChange={(e) => handleDeliveryAddressChange("zip", e.target.value)}
                  />
                </div>
                <div>
                  <Label htmlFor="country">Country</Label>
                  <Select
                    id="country"
                    value={deliveryAddress.country}
                    onValueChange={(e) => handleDeliveryAddressChange("country", e.target.value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select country" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="us">United States</SelectItem>
                      <SelectItem value="ca">Canada</SelectItem>
                      <SelectItem value="mx">Mexico</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </form>
              <div className="mt-6 flex justify-end">
                <Button onClick={handleNextStep}>Continue</Button>
              </div>
            </div>
          )}
          {step === 2 && (
            <div>
              <h2 className="mb-4 text-xl font-bold">Payment Method</h2>
              <RadioGroup value={paymentMethod} onValueChange={handlePaymentMethodChange}>
                <div className="grid gap-2">
                  <Label
                    htmlFor="payment-method-card"
                    className="flex items-center gap-2 rounded-md border p-4 [&:has(:checked)]:bg-muted"
                  >
                    <RadioGroupItem id="payment-method-card" value="card" />
                    <div className="flex items-center gap-2">
                      <div className="h-6 w-6" />
                      <span>Credit/Debit Card</span>
                    </div>
                  </Label>
                  <Label
                    htmlFor="payment-method-paypal"
                    className="flex items-center gap-2 rounded-md border p-4 [&:has(:checked)]:bg-muted"
                  >
                    <RadioGroupItem id="payment-method-paypal" value="paypal" />
                    <div className="flex items-center gap-2">
                      <div className="h-6 w-6" />
                      <span>PayPal</span>
                    </div>
                  </Label>
                </div>
              </RadioGroup>
              <div className="mt-6 flex justify-between">
                <Button variant="outline" onClick={handlePreviousStep}>
                  Previous
                </Button>
                <Button onClick={handleNextStep}>Continue</Button>
              </div>
            </div>
          )}
          {step === 3 && (
            <div>
              <h2 className="mb-4 text-xl font-bold">Review Order</h2>
              <div className="grid gap-4">
                <div>
                  <h3 className="mb-2 text-lg font-bold">Delivery Address</h3>
                  <address className="text-muted-foreground">
                    {deliveryAddress.name}
                    <br />
                    {deliveryAddress.address1}
                    <br />
                    {deliveryAddress.address2 && (
                      <>
                        {deliveryAddress.address2}
                        <br />
                      </>
                    )}
                    {deliveryAddress.city}, {deliveryAddress.state} {deliveryAddress.zip}
                    <br />
                    {deliveryAddress.country}
                  </address>
                </div>
                <div>
                  <h3 className="mb-2 text-lg font-bold">Payment Method</h3>
                  <div className="flex items-center gap-2 text-muted-foreground">
                    {paymentMethod === "card" && (
                      <>
                        <div className="h-6 w-6" />
                        <span>Credit/Debit Card</span>
                      </>
                    )}
                    {paymentMethod === "paypal" && (
                      <>
                        <div className="h-6 w-6" />
                        <span>PayPal</span>
                      </>
                    )}
                  </div>
                </div>
                <div>
                  <h3 className="mb-2 text-lg font-bold">Order Summary</h3>
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Item</TableHead>
                        <TableHead>Price</TableHead>
                        <TableHead>Quantity</TableHead>
                        <TableHead>Total</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {cart.map((item) => (
                        <TableRow key={item.id}>
                          <TableCell>{item.name}</TableCell>
                          <TableCell>${item.price.toFixed(2)}</TableCell>
                          <TableCell>{item.quantity}</TableCell>
                          <TableCell>${(item.price * item.quantity).toFixed(2)}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                  <div className="mt-4 flex justify-end">
                    <div className="grid gap-2">
                      <div className="flex items-center justify-between">
                        <span className="text-muted-foreground">Subtotal:</span>
                        <span>${cart.reduce((total, item) => total + item.price * item.quantity, 0).toFixed(2)}</span>
                      </div>
                      <div className="flex items-center justify-between">
                        <span className="text-muted-foreground">Shipping:</span>
                        <span>$5.00</span>
                      </div>
                      <Separator />
                      <div className="flex items-center justify-between font-bold">
                        <span>Total:</span>
                        <span>${cart.reduce((total, item) => total + item.price * item.quantity, 0) + 5}</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div className="mt-6 flex justify-between">
                <Button variant="outline" onClick={handlePreviousStep}>
                  Previous
                </Button>
                <Button onClick={handlePlaceOrder}>Place Order</Button>
              </div>
            </div>
          )}
        </div>
        <div className="col-span-1 rounded-lg border bg-white p-6 shadow-md">
          <h2 className="mb-4 text-xl font-bold">Order Summary</h2>
          <div className="grid gap-4">
            {cart.map((item) => (
              <div key={item.id} className="flex items-center justify-between">
                <div>
                  <h3 className="font-medium">{item.name}</h3>
                  <p className="text-muted-foreground">
                    ${item.price.toFixed(2)} x {item.quantity}
                  </p>
                </div>
                <span>${(item.price * item.quantity).toFixed(2)}</span>
              </div>
            ))}
            <Separator />
            <div className="flex items-center justify-between font-bold">
              <span>Total</span>
              <span>${cart.reduce((total, item) => total + item.price * item.quantity, 0) + 5}</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
